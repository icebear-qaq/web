// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: btm2dnrunf38Pvbn4oHZBZ
// Component: D8GZ02q3EC1Y

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";
import * as plasmicAuth from "@plasmicapp/react-web/lib/auth";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import PageLayout from "../../PageLayout"; // plasmic-import: cNhW0j82HfTQ/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: btm2dnrunf38Pvbn4oHZBZ/projectcss
import sty from "./PlasmicCandidates.module.css"; // plasmic-import: D8GZ02q3EC1Y/css

createPlasmicElementProxy;

export type PlasmicCandidates__VariantMembers = {};
export type PlasmicCandidates__VariantsArgs = {};
type VariantPropType = keyof PlasmicCandidates__VariantsArgs;
export const PlasmicCandidates__VariantProps = new Array<VariantPropType>();

export type PlasmicCandidates__ArgsType = {};
type ArgPropType = keyof PlasmicCandidates__ArgsType;
export const PlasmicCandidates__ArgProps = new Array<ArgPropType>();

export type PlasmicCandidates__OverridesType = {
  root?: Flex__<"div">;
  pageLayout?: Flex__<typeof PageLayout>;
  embedHtml?: Flex__<typeof Embed>;
};

export interface DefaultCandidatesProps {
  className?: string;
}

const $$ = {};

function PlasmicCandidates__RenderFunc(props: {
  variants: PlasmicCandidates__VariantsArgs;
  args: PlasmicCandidates__ArgsType;
  overrides: PlasmicCandidates__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const dataSourcesCtx = usePlasmicDataSourceContext();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    candidates: usePlasmicDataOp(() => {
      return {
        sourceId: "gtYKLw7KRCthUM7M1zjfhd",
        opId: "b041b440-532a-47fa-a950-40b7a445d2b3",
        userArgs: {},
        cacheKey: `plasmic.$.b041b440-532a-47fa-a950-40b7a445d2b3.$.`,
        invalidatedKeys: null,
        roleId: "5d3748e7-f61b-4382-88c0-b75d69da4ab9"
      };
    }),
    positions: usePlasmicDataOp(() => {
      return {
        sourceId: "gtYKLw7KRCthUM7M1zjfhd",
        opId: "b009fc24-85b0-4ccc-9170-1b4087af739d",
        userArgs: {},
        cacheKey: `plasmic.$.b009fc24-85b0-4ccc-9170-1b4087af739d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <PageLayout
            data-plasmic-name={"pageLayout"}
            data-plasmic-override={overrides.pageLayout}
            className={classNames("__wab_instance", sty.pageLayout)}
          >
            <DataCtxReader__>
              {$ctx => (
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={
                    '<!DOCTYPE html>\r\n<html lang="en">\r\n<head>\r\n    <meta charset="UTF-8">\r\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\r\n    <title>Product Introduction: Time for Profit</title>\r\n    <style>\r\n        body {\r\n            font-family: Arial, sans-serif;\r\n            margin: 20px;\r\n        }\r\n        h1 {\r\n            color: #333;\r\n        }\r\n        p {\r\n            color: #555;\r\n            line-height: 1.6;\r\n        }\r\n        .container {\r\n            max-width: 800px;\r\n            margin: 0 auto;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class="container">\r\n        <h1>Product Introduction: Time for Profit - A Robust Investment Strategy with 300% Annual Returns</h1>\r\n        <p>Dear Investors,</p>\r\n        <p>We are excited to introduce our latest investment product, "Time for Profit," designed to deliver a remarkable 300% annual return through a unique blend of hedge fund strategies and timely market insights. Here\u2019s a concise overview of what makes this product a standout choice for your investment portfolio:</p>\r\n        <h2>Product Overview</h2>\r\n        <p>"Time for Profit" harmonizes sophisticated hedge fund tactics with real-time market intelligence, ensuring consistent growth across diverse market scenarios. Our meticulously curated portfolio aims to provide a secure, dependable, and lucrative investment avenue.</p>\r\n        <h2>Investment Philosophy</h2>\r\n        <p><strong>Time for Profit</strong>: By integrating long-term holdings with agile short-term trades, we capitalize on market volatility to maximize returns. Our multi-faceted hedge fund methodology, encompassing market-neutral strategies, arbitrage opportunities, and event-driven tactics, ensures stable returns and mitigates volatility.</p>\r\n        <h2>Investment Portfolio</h2>\r\n        <p>Our diversified portfolio spans equities, bonds, commodities, foreign exchange, and derivatives. This diversification enhances stability and potential returns. We focus on high-quality stocks for steady capital appreciation and dividend income, allocate to high-credit-rated bonds for stability, invest in key commodities to hedge against inflation, and exploit currency market fluctuations for gains.</p>\r\n        <h2>Risk Management</h2>\r\n        <p>We employ stringent controls and monitoring mechanisms to safeguard your investment. Regular risk assessments, rigorous stop-loss protocols, and dynamic adjustments ensure optimal alignment with market conditions.</p>\r\n        <h2>Return Expectations</h2>\r\n        <p>We are committed to delivering an impressive 300% annual return. With our expert team and advanced strategies, we are confident in achieving this goal and driving sustainable wealth growth.</p>\r\n        <h2>Client Services</h2>\r\n        <p>Our comprehensive client services include investment advisory, market analysis, regular reports, and personalized recommendations. Our dedicated team ensures you have the best possible experience.</p>\r\n        <h2>Conclusion</h2>\r\n        <p>"Time for Profit" represents an innovative and high-potential investment opportunity. We warmly invite you to join our program and share in the market\u2019s opportunities and rewards. For inquiries or further information, please contact us.</p>\r\n        <p>Wishing you a prosperous investment journey!</p>\r\n        <p>Sincerely,</p>\r\n        <p>Time foundation<br></p>\r\n    </div>\r\n</body>\r\n</html>'
                  }
                />
              )}
            </DataCtxReader__>
          </PageLayout>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pageLayout", "embedHtml"],
  pageLayout: ["pageLayout", "embedHtml"],
  embedHtml: ["embedHtml"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  pageLayout: typeof PageLayout;
  embedHtml: typeof Embed;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCandidates__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCandidates__VariantsArgs;
    args?: PlasmicCandidates__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCandidates__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCandidates__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCandidates__ArgProps,
          internalVariantPropNames: PlasmicCandidates__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCandidates__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCandidates";
  } else {
    func.displayName = `PlasmicCandidates.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"5d3748e7-f61b-4382-88c0-b75d69da4ab9"}
      appId={"btm2dnrunf38Pvbn4oHZBZ"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={true}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

function withUsePlasmicAuth<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const WithUsePlasmicAuthComponent: React.FC<P> = props => {
    const dataSourceCtx = usePlasmicDataSourceContext() ?? {};
    const { isUserLoading, user, token } = plasmicAuth.usePlasmicAuth({
      appId: "btm2dnrunf38Pvbn4oHZBZ"
    });

    return (
      <PlasmicDataSourceContextProvider__
        value={{
          ...dataSourceCtx,
          isUserLoading,
          userAuthToken: token,
          user
        }}
      >
        <WrappedComponent {...props} />
      </PlasmicDataSourceContextProvider__>
    );
  };
  return WithUsePlasmicAuthComponent;
}

export const PlasmicCandidates = Object.assign(
  // Top-level PlasmicCandidates renders the root element
  withUsePlasmicAuth(withPlasmicPageGuard(makeNodeComponent("root"))),
  {
    // Helper components rendering sub-elements
    pageLayout: makeNodeComponent("pageLayout"),
    embedHtml: makeNodeComponent("embedHtml"),

    // Metadata about props expected for PlasmicCandidates
    internalVariantProps: PlasmicCandidates__VariantProps,
    internalArgProps: PlasmicCandidates__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCandidates;
/* prettier-ignore-end */
